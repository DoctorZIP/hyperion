<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       ">

    <bean id="hyperionPipelineInitiator" class="com.dottydingo.service.endpoint.AsynchronousPipelineInitiator">
        <property name="initialPhaseSelector">
            <bean class="com.dottydingo.service.pipeline.StaticNextPhaseSelector">
                <property name="nextPhase" ref="hyperionEndpointValidationExecutor"/>
            </bean>
        </property>
        <property name="timeout" value="${endpoint.asynchronousTimeout}"/>
    </bean>

    <bean id="hyperionBaseExecutor" class="com.dottydingo.service.endpoint.pipeline.EndpointAsynchronousExecutor" abstract="true">
        <property name="errorHandler" ref="hyperionErrorHandler"/>
        <property name="contextStatusRegistry" ref="hyperionEndpointStatusRegistry"/>
    </bean>

    <bean id="hyperionEndpointValidationExecutor" parent="hyperionBaseExecutor">
        <property name="phase" ref="hyperionEndpointValidationPhase"/>
        <property name="nextPhaseSelector">
            <bean class="com.dottydingo.hyperion.service.pipeline.selector.CrudPhaseSelector">
                <property name="queryPhaseExecutor" ref="hyperionQueryExecutor"/>
                <property name="getPhaseExecutor" ref="hyperionGetExecutor"/>
                <property name="postPhaseExecutor" ref="hyperionCreateExecutor"/>
                <property name="putPhaseExecutor" ref="hyperionUpdateExecutor"/>
                <property name="deletePhaseExecutor" ref="hyperionDeleteExecutor"/>
                <property name="historyPhaseExecutor" ref="hyperionHistoryExecutor"/>
                <property name="optionsPhaseExecutor" ref="hyperionOptionsExecutor"/>
            </bean>
        </property>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionEndpointValidationPhase"/>
                <property name="corePoolSize" value="${pipeline.endpointValidationPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.endpointValidationPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.endpointValidationPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="baseHyperionPersistenceExecutor" parent="hyperionBaseExecutor" abstract="true">
        <property name="nextPhaseSelector">
            <bean class="com.dottydingo.service.pipeline.StaticNextPhaseSelector">
                <property name="nextPhase" ref="hyperionMarhallExecutor"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionQueryExecutor" parent="baseHyperionPersistenceExecutor">
        <property name="phase" ref="hyperionQueryPhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionQueryPhase"/>
                <property name="corePoolSize" value="${pipeline.queryPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.queryPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.queryPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionGetExecutor" parent="baseHyperionPersistenceExecutor">
        <property name="phase" ref="hyperionGetPhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionGetPhase"/>
                <property name="corePoolSize" value="${pipeline.getPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.getPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.getPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionCreateExecutor" parent="baseHyperionPersistenceExecutor">
        <property name="phase" ref="hyperionCreatePhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionCreatePhase"/>
                <property name="corePoolSize" value="${pipeline.createPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.createPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.createPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionUpdateExecutor" parent="baseHyperionPersistenceExecutor">
        <property name="phase" ref="hyperionUpdatePhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionUpdatePhase"/>
                <property name="corePoolSize" value="${pipeline.updatePhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.updatePhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.updatePhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionDeleteExecutor" parent="baseHyperionPersistenceExecutor">
        <property name="phase" ref="hyperionDeletePhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionDeletePhase"/>
                <property name="corePoolSize" value="${pipeline.deletePhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.deletePhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.deletePhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionHistoryExecutor" parent="baseHyperionPersistenceExecutor">
        <property name="phase" ref="hyperionHistoryPhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionHistoryPhase"/>
                <property name="corePoolSize" value="${pipeline.historyPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.historyPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.historyPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionOptionsExecutor" parent="hyperionBaseExecutor">
        <property name="phase" ref="hyperionOptionsPhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionOptionsPhase"/>
                <property name="corePoolSize" value="${pipeline.optionsPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.optionsPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.optionsPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>

    <bean id="hyperionMarhallExecutor" parent="hyperionBaseExecutor">
        <property name="phase" ref="hyperionResponseMarshallerPhase"/>
        <property name="executor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
                <property name="threadNamePrefix" value="hyperionResponseMarshallerPhase"/>
                <property name="corePoolSize" value="${pipeline.responseMarshallerPhase.minThreads}"/>
                <property name="maxPoolSize" value="${pipeline.responseMarshallerPhase.maxThreads}"/>
                <property name="queueCapacity" value="${pipeline.responseMarshallerPhase.maxQueueSize}"/>
            </bean>
        </property>
    </bean>



</beans>